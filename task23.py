# todo: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ –∏–≥—Ä—ã  ../code/ya_kube.py

#from lesson_5.code import ya_kube



from db import DEFENITION_WORD   # —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –ª–µ–∂–∏—Ç –≤ db/txt.py

import random
import uuid
import datetime
import os



# ==== –í–≤–æ–¥ –∏–º–µ–Ω–∏ ====
name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")


# ==== –ú–µ–Ω—é ====
def print_menu():
    print("""   
       üìã –ú–µ–Ω—é:
       1Ô∏è‚É£  –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
       2Ô∏è‚É£  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É
       3Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
       4Ô∏è‚É£  –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    """)


# ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ ====
def generate_key() -> str:
    keys = list(DEFENITION_WORD.keys())
    random.shuffle(keys)
    return keys.pop()


# ==== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ====
def save_game(id_session, word, mask):
    with open("save_game.csv", "at", encoding="utf-8") as f:
        dt = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        mask_str = "".join(mask)
        line = f"{dt}|{id_session}|{name}|{word}|{mask_str}\n"
        f.write(line)
    print("üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


# ==== –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ====
def load_game():
    if not os.path.exists("save_game.csv"):
        print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä!")
        return

    with open("save_game.csv", "r", encoding="utf-8") as f:
        list_str = f.readlines()

    found = [i for i, s in enumerate(list_str) if name in s]
    if not found:
        print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç!")
        return

    print("üìÇ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    for i in found:
        print(i, ")", list_str[i].strip())

    try:
        indx_load = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "))
        sg = list_str[indx_load].split("|")
        session_uuid = sg[1]
        key = sg[3].strip()
        mask = list(sg[4].strip())
        print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        start_game(session_uuid, key, mask, list(key))
    except (IndexError, ValueError):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")


# ==== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ====
def start_game(session_uuid, key, mask, list_word):
    print(f"üìò –ü–æ–¥—Å–∫–∞–∑–∫–∞: {DEFENITION_WORD[key]}")
    print("–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ:", "".join(mask))

    while '#' in mask:
        alfa = input("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É (–∏–ª–∏ '2' ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, '4' ‚Äî –≤—ã—Ö–æ–¥): ").lower()

        if alfa == "2":
            save_game(session_uuid, key, mask)
            continue
        elif alfa == "4":
            print(f"üëã –°–ø–∞—Å–∏–±–æ, {name}, –∑–∞ –∏–≥—Ä—É!")
            return

        found = False
        for idx, char in enumerate(list_word):
            if alfa == char:
                mask[idx] = alfa
                found = True

        if found:
            print("‚úÖ –ï—Å—Ç—å —Ç–∞–∫–∞—è –±—É–∫–≤–∞!")
        else:
            print("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã!")

        print("–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ:", "".join(mask))

    print(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}! –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {key}")


# ==== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é ====
while True:
    print_menu()
    try:
        num = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: "))
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
        continue

    match num:
        case 1:
            key = generate_key()
            list_word = list(key)
            mask = ['#'] * len(key)
            session_uuid = uuid.uuid4()
            start_game(session_uuid, key, mask, list_word)

        case 2:
            print("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–≤–≤–µ–¥–∏—Ç–µ '2').")

        case 3:
            load_game()

        case 4:
            print(f"üëã –ü–æ–∫–∞, {name}! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break

        case _:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
