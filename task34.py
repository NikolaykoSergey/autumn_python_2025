from db import DEFENITION_WORD   # —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –ª–µ–∂–∏—Ç –≤ db/txt.py
import random
import uuid
import datetime
import os


# ==== –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏ ====
class SaveGame:
    FILE_NAME = "save_game.csv"

    def save(self, id_session, name, word, mask):
        """üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É"""
        with open(self.FILE_NAME, "at", encoding="utf-8") as f:
            dt = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            mask_str = "".join(mask)
            line = f"{dt}|{id_session}|{name}|{word}|{mask_str}\n"
            f.write(line)
        print("üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    def load(self, name):
        """üìÇ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—É –ø–æ –∏–º–µ–Ω–∏"""
        if not os.path.exists(self.FILE_NAME):
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä!")
            return None

        with open(self.FILE_NAME, "r", encoding="utf-8") as f:
            list_str = f.readlines()

        found = [i for i, s in enumerate(list_str) if name in s]
        if not found:
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç!")
            return None

        print("üìÇ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        for i, idx in enumerate(found):
            print(i, ")", list_str[idx].strip())

        try:
            indx_load = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "))
            sg = list_str[found[indx_load]].split("|")
            session_uuid = sg[1]
            key = sg[3].strip()
            mask = list(sg[4].strip())
            print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return session_uuid, key, mask
        except (IndexError, ValueError):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return None


# ==== –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã ====
class YaKube:
    def __init__(self):
        self.name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        self.save_manager = SaveGame()

    # ==== –ú–µ–Ω—é ====
    def print_menu(self):
        print("""   
       üìã –ú–µ–Ω—é:
       1Ô∏è‚É£  –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
       2Ô∏è‚É£  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É
       3Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
       4Ô∏è‚É£  –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
        """)

    # ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ ====
    def generate_key(self) -> str:
        keys = list(DEFENITION_WORD.keys())
        random.shuffle(keys)
        return keys.pop()

    # ==== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ====
    def start_game(self, session_uuid, key, mask, list_word):
        print(f"üìò –ü–æ–¥—Å–∫–∞–∑–∫–∞: {DEFENITION_WORD[key]}")
        print("–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ:", "".join(mask))

        while '#' in mask:
            alfa = input("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É (–∏–ª–∏ '2' ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, '4' ‚Äî –≤—ã—Ö–æ–¥): ").lower()

            if alfa == "2":
                self.save_manager.save(session_uuid, self.name, key, mask)
                continue
            elif alfa == "4":
                print(f"üëã –°–ø–∞—Å–∏–±–æ, {self.name}, –∑–∞ –∏–≥—Ä—É!")
                return

            found = False
            for idx, char in enumerate(list_word):
                if alfa == char:
                    mask[idx] = alfa
                    found = True

            if found:
                print("‚úÖ –ï—Å—Ç—å —Ç–∞–∫–∞—è –±—É–∫–≤–∞!")
            else:
                print("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã!")

            print("–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ:", "".join(mask))

        print(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {self.name}! –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {key}")

    # ==== –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã ====
    def new_game(self):
        key = self.generate_key()
        list_word = list(key)
        mask = ['#'] * len(key)
        session_uuid = uuid.uuid4()
        self.start_game(session_uuid, key, mask, list_word)

    # ==== –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ====
    def load_game(self):
        result = self.save_manager.load(self.name)
        if result:
            session_uuid, key, mask = result
            self.start_game(session_uuid, key, mask, list(key))

    # ==== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é ====
    def run(self):
        while True:
            self.print_menu()
            try:
                num = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: "))
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
                continue

            match num:
                case 1:
                    self.new_game()
                case 2:
                    print("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–≤–≤–µ–¥–∏—Ç–µ '2').")
                case 3:
                    self.load_game()
                case 4:
                    print(f"üëã –ü–æ–∫–∞, {self.name}! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                    break
                case _:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# ==== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ====
if __name__ == "__main__":
    game = YaKube()
    game.run()